from __future__ import print_function

import sys

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
from pyspark.sql import Row, SparkSession


def get_spark_session_instance(spark_conf):
    if 'sparkSessionSingletonInstance' not in globals():
        globals()['sparkSessionSingletonInstance'] = SparkSession \
            .builder \
            .config(conf=spark_conf) \
            .getOrCreate()

    return globals()['sparkSessionSingletonInstance']


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('Usage: recife_traffic_accidents_dataframe.py <hostname> <port> ', file=sys.stderr)
        exit(-1)
    host, port = sys.argv[1:]
    sc = SparkContext(appName='PythonStreamingRecifeTrafficAccidents')
    ssc = StreamingContext(sc, 7)

    # Create a socket stream on target ip:port and count the
    # words in input stream of \n delimited text (eg. generated by 'nc')
    lines = ssc.socketTextStream(host, int(port))
    accidents_with_bikes = lines.map(lambda line: line.split('|')) \
                                .filter(lambda values: str(values[13]) != '') \
                                .map(lambda values: (str(values[4]), str(values[5])))

    # Convert RDDs of the words DStream to DataFrame and run SQL query
    def process(time, rdd):
        print("========= %s =========" % str(time))
        print("RDD: %s" % rdd.map(lambda row: row[0]))

        try:
            # Get the singleton instance of SparkSession
            spark = get_spark_session_instance(rdd.context.getConf())

            # Convert RDD[String] to RDD[Row] to DataFrame
            row_rdd = rdd.map(lambda row: Row(neighbourhood=row[0], street=row[1]))
            accidents_with_bikes_data_frame = spark.createDataFrame(row_rdd)

            # Creates a temporary view using the DataFrame.
            accidents_with_bikes_data_frame.createOrReplaceTempView("words")

            # Count accidents with bikes from each neighbourhood on table using SQL and print it
            accidents_with_bikes_data_frame = \
                spark.sql("select neighbourhood, count(*) as total from accidents_with_bikes group by neighbourhood")
            accidents_with_bikes_data_frame.show()
        except:
            pass

    accidents_with_bikes.foreachRDD(process)
    ssc.start()
    ssc.awaitTermination()
